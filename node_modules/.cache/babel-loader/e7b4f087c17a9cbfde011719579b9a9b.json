{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/root/Desktop/react/moz-todo-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport FilterButton from './components/FilterButton';\nimport { useState, useEffect, useRef, useReducer } from 'react';\nimport { nanoid } from 'nanoid';\n\nfunction App(props) {\n  _s();\n\n  // console.log(props.tasks)\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  const listHeadingRef = useRef(null);\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.complete,\n    Completed: task => task.complete\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP); // console.log(FILTER_NAMES)\n\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this));\n\n  const toggleTaskCompleted = id => {\n    const updateTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          complete: !task.complete\n        };\n      }\n\n      return task;\n    });\n    setTasks(updateTasks);\n  };\n\n  const editTask = (id, newName) => {\n    const editTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editTaskList);\n  };\n\n  const deleteTask = id => {\n    const remainingTask = tasks.filter(task => id !== task.id);\n    setTasks(remainingTask);\n  };\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    name: task.name,\n    complete: task.complete,\n    id: task.id,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this));\n\n  const addTask = name => {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      complete: false\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: filterList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      tabIndex: \"1\",\n      ref: listHeadingRef,\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WeXXeaQLmeX0RpJ7gzNGbFe19E0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/root/Desktop/react/moz-todo-react/src/App.js"],"names":["Todo","Form","FilterButton","useState","useEffect","useRef","useReducer","nanoid","App","props","tasks","setTasks","filter","setFilter","listHeadingRef","FILTER_MAP","All","Active","task","complete","Completed","FILTER_NAMES","Object","keys","filterList","map","name","toggleTaskCompleted","id","updateTasks","editTask","newName","editTaskList","deleteTask","remainingTask","taskList","addTask","newTask","tasksNoun","length","headingText"],"mappings":"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","sourcesContent":["import './App.css';\nimport Todo from './components/Todo'\nimport Form from './components/Form'\nimport FilterButton from './components/FilterButton';\nimport { useState,useEffect,useRef, useReducer } from 'react';\nimport {nanoid} from 'nanoid'\n\nfunction App(props) {\n  // console.log(props.tasks)\n  const [tasks,setTasks] = useState(props.tasks)\n  const [filter, setFilter] = useState('All')\n  const   listHeadingRef = useRef(null)\n\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.complete,\n    Completed: task => task.complete\n  }\n  const FILTER_NAMES = Object.keys(FILTER_MAP)\n  // console.log(FILTER_NAMES)\n  const filterList = FILTER_NAMES.map(name=>(\n    <FilterButton key={name} name={name} isPressed={name === filter} setFilter={setFilter}/>\n  ))\n\n\n  const toggleTaskCompleted = (id)=>{\n    const updateTasks = tasks.map( task =>{\n      if(id === task.id){\n        return {...task,complete:!task.complete}\n      }\n      return task;\n    });\n    setTasks(updateTasks)\n  }\n\n  const editTask = (id,newName) =>{\n    const editTaskList = tasks.map(task=>{\n      if(id=== task.id){\n        return {...task,name:newName}\n      }\n      return task\n    })\n    setTasks(editTaskList)\n  }\n\n  const deleteTask = (id) =>{\n    const remainingTask = tasks.filter(task=> id !== task.id);\n    setTasks(remainingTask)\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task=> (\n    <Todo \n      name={task.name} \n      complete={task.complete} \n      id={task.id} \n      key={task.id} \n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ))\n\n  const addTask = (name) =>{\n    const newTask = {id:\"todo-\"+nanoid(),name:name,complete:false};\n    setTasks([...tasks,newTask])\n  }\n  \n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  \n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\" tabIndex=\"1\" ref={listHeadingRef}>\n        {headingText} \n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}